# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none

pool:
  name: default

variables:
  TF_VAR_BKSTRGRG: 'aks-terraform'
  TF_VAR_BKSTRG: 'tfstate1960'
  TF_VAR_BKCONTAINER: 'tfstate'
  TF_VAR_BKSTRGKEY: 'aks.terraform.tfstate'
  TF_VAR_CARTS_IMG: 'weaveworksdemos/carts:0.4.8'
  TF_VAR_CATALOGUE_IMG: 'weaveworksdemos/catalogue:0.3.5'
  TF_VAR_CATALOGUE_DB_IMG: ''
  TF_VAR_ORDERS_IMG: ''
  TF_VAR_PAYMENT_IMG: ''
  TF_VAR_QUEUE_MASTER_IMG: ''
  TF_VAR_SHIPPING_IMG: ''
  TF_VAR_USER_IMG: ''
  TF_VAR_USER_DB_IMG: ''
  TF_VAR_FRONTEND_IMG: ''

stages:
  - stage: tfvalidate
    jobs:
      - job: validate
        continueOnError: false
        steps:
        - script: 'sudo apt install unzip -y'
          displayName: install unzip
        - script: |
            curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          displayName: 'Install Azure CLI'
        - task: AzureCLI@2
          inputs:
            azureSubscription: 'tfstateServiceConnection'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              declare -A repositories=(
                ["carts"]="CARTS_IMG"
                ["catalogue"]="CATALOGUE_IMG"
                ["catalogue-db"]="CATALOGUE_DB_IMG"
                ["orders"]="ORDERS_IMG"
                ["payment"]="PAYMENT_IMG"
                ["queuemaster"]="QUEUE_MASTER_IMG"
                ["shipping"]="SHIPPING_IMG"
                ["user"]="USER_IMG"
                ["user-db"]="USER_DB_IMG"
                ["frontend"]="FRONTEND_IMG"
              )

              for repo in "${!repositories[@]}"; do
                # Attempt to fetch the latest tag and suppress any error output
                latest_tag=$(az acr repository show-tags -n sockshop1 --repository $repo --orderby time_desc --output tsv 2>/dev/null | head -n 1)
                # echo "Latest tag for $repo: $latest_tag"
                # Check if the latest_tag is empty
                if [ -z "$latest_tag" ]; then
                  echo "No tag found for repository $repo or repository does not exist."
                  continue
                fi

                # If successful and tag is found, set the variable
                img_name="$repo:$latest_tag"
                # export TF_VAR_${repositories[$repo]}=$img_name
                echo "##vso[task.setvariable variable=TF_VAR_${repositories[$repo]}]$img_name"
              done
              log_var=DEBUG
              echo "##vso[task.setvariable variable=TF_LOG]$log_var"
        - task: TerraformInstaller@1
          displayName: tfinstall
          inputs:
            terraformVersion: 'latest'
        - task: TerraformTaskV4@4
          displayName: init
          inputs:
            provider: 'azurerm'
            command: 'init'
            backendServiceArm: 'tfstateServiceConnection'
            backendAzureRmResourceGroupName: 'aks-terraform'
            backendAzureRmStorageAccountName: 'tfstate1960'
            backendAzureRmContainerName: 'tfstate'
            backendAzureRmKey: 'aks.terraform.tfstate'
        - task: TerraformTaskV4@4
          displayName: validate
          inputs:
            provider: 'azurerm'
            command: 'validate'
  - stage: deploy
    condition: succeeded('tfvalidate')
    dependsOn: tfvalidate
    jobs:
      - job: apply
        steps:
        - script: 'sudo apt install unzip -y'
          displayName: install unzip
        - script: |
            curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          displayName: 'Install Azure CLI'
        - task: AzureCLI@2
          inputs:
            azureSubscription: 'tfstateServiceConnection'
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              declare -A repositories=(
                ["carts"]="CARTS_IMG"
                ["catalogue"]="CATALOGUE_IMG"
                ["catalogue-db"]="CATALOGUE_DB_IMG"
                ["orders"]="ORDERS_IMG"
                ["payment"]="PAYMENT_IMG"
                ["queuemaster"]="QUEUE_MASTER_IMG"
                ["shipping"]="SHIPPING_IMG"
                ["user"]="USER_IMG"
                ["user-db"]="USER_DB_IMG"
                ["frontend"]="FRONTEND_IMG"
              )

              for repo in "${!repositories[@]}"; do
                # Attempt to fetch the latest tag and suppress any error output
                latest_tag=$(az acr repository show-tags -n sockshop1 --repository $repo --orderby time_desc --output tsv 2>/dev/null | head -n 1)
                # echo "Latest tag for $repo: $latest_tag"
                # Check if the latest_tag is empty
                if [ -z "$latest_tag" ]; then
                  echo "No tag found for repository $repo or repository does not exist."
                  continue
                fi

                # If successful and tag is found, set the variable
                img_name="$repo:$latest_tag"
                # export TF_VAR_${repositories[$repo]}=$img_name
                echo "##vso[task.setvariable variable=TF_VAR_${repositories[$repo]}]$img_name"
              done
              log_var=DEBUG
              echo "##vso[task.setvariable variable=TF_LOG]$log_var"
        - task: TerraformInstaller@1
          displayName: tfinstall
          inputs:
            terraformVersion: 'latest'
        - task: TerraformTaskV4@4
          displayName: init
          inputs:
            provider: 'azurerm'
            command: 'init'
            backendServiceArm: 'tfstateServiceConnection'
            backendAzureRmResourceGroupName: 'aks-terraform'
            backendAzureRmStorageAccountName: 'tfstate1960'
            backendAzureRmContainerName: 'tfstate'
            backendAzureRmKey: 'aks.terraform.tfstate'
        - task: TerraformTaskV4@4
          displayName: plan
          inputs:
            provider: 'azurerm'
            command: 'plan'
            environmentServiceNameAzureRM: 'tfstateServiceConnection'
        - task: TerraformTaskV4@4
          displayName: apply
          inputs:
            provider: 'azurerm'
            command: 'apply'
            environmentServiceNameAzureRM: 'tfstateServiceConnection'